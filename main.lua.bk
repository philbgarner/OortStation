
game_settings = {
  resolution = {1024, 768}
  ,sfx_volume = 0.33
}

function round(num, numDecimalPlaces)
  local mult = 10^(numDecimalPlaces or 0)
  return math.floor(num * mult + 0.5) / mult
end

anim8 = require "anim8"

require("resources")

local audio_ship_background = nil
local audio_ship_engine = nil
local audio_ship_laser = nil
local audio_ship_laser_end = nil
local audio_destroy_rubble = nil

function distance ( x1, y1, x2, y2 )
  local dx = x1 - x2
  local dy = y1 - y2
  return math.sqrt ( dx * dx + dy * dy )
end

local galaxy = nil
local target = nil

local ship = nil
local ai_ships = {}
local effects = {}
local world = nil


local beam_impact = nil

local blur1 = nil
local blur2 = nil
local bloom = nil

local font = nil


local weapon_active_laser = false


ships = require "ships"
asteroids = require "asteroids"
ui = require "ui"
effects = require "effects"
portraits = require "portraits"


local quests = {
  intro = {
      accepted = false
      ,completed = false
      ,stateid = 1
    }
}
function quests.intro:checkComplete()
  print ("Check complete on intro quest.")
  return false
end
function quests.intro:visit()
  
  if not quests.intro.accepted and quests.intro.stateid == 1 then
    quests.intro.accepted = true
  
    portraits:say("ai", "ONA", {"Hi my name is ONA: Onboard Navigational Assistant, your ship's AI."
        ,"I'll help you get started in this unexplored fringe of our solar system."
        ,"This station - Oort Station - is humanity's first outpost in the kuiper belt."
        ,"You can sell the materials you mine from asteroids there, and in time when the"
        ,"economy improves companies will offer some services at Oort Station."
        ,"Press Q (Quests) to consult with me and review your missions."
        ,"# END TRANSMISSION #"
        }, 3, function() quests.intro:visit() end)
  elseif quests.intro.accepted and quests.intro.stateid == 1 then
    
    portraits:say("ai", "ONA", {"There are three different asteroid types (1, 2 and 3), which offer "
        ,"different concentrations of elements.  Efficient mining takes this into account: mine only"
        ,"those which suit your current mission or personal objective."
        ,"To begin, let's gather 200m3 of ore material from any asteroid you can find."
        ,"Harvest by pressing they SPACE key once you have targeted an asteroid, press N key to cycle"
        ,"through targets in your sector until you've selected the correct one."
        ,"Press Q when you have enough ore."
        ,"# END TRANSMISSION #"
        }, 3)
    
    quests.intro.stateid = 2
  elseif quests.intro.accepted and quests.intro.stateid == 2 and ship.cargo_ore < 200 then
  
    portraits:say("ai", "ONA", {"You currently have only collected " .. round(ship.cargo_ore, 2) .. " of 200m3 material."
        ,"Please continue mining asteroids in this sector."
        ,"# END TRANSMISSION #"
        }, 2)
  elseif quests.intro.accepted and quests.intro.stateid == 2 and ship.cargo_ore >= 200 then
    portraits:say("ai", "ONA", {"200m3 collected! Good work.  Let's return to Oort Station and press"
        ,"D when prompted to dock.  We'll sell this ore and upgrade our equipment."
        ,"# END TRANSMISSION #"
        }, 2)
    quests.intro.stateid = 3
  end
  
end

function beginContact(a, b, coll)

end
 
function endContact(a, b, coll)
 
end
 
function preSolve(a, b, coll)
 
end
 
function postSolve(a, b, coll, normalimpulse, tangentimpulse)
 
end


function love.load()
  quests.intro:visit()
  
	blur1 = love.graphics.newShader [[

		vec4 effect(vec4 color, Image texture, vec2 vTexCoord, vec2 pixel_coords)
		{
			vec4 sum = vec4(0.0);
			number blurSize = 0.005;

			// take nine samples, with the distance blurSize between them
			sum += texture2D(texture, vec2(vTexCoord.x - 4.0*blurSize, vTexCoord.y)) * 0.05;
			sum += texture2D(texture, vec2(vTexCoord.x - 3.0*blurSize, vTexCoord.y)) * 0.09;
			sum += texture2D(texture, vec2(vTexCoord.x - 2.0*blurSize, vTexCoord.y)) * 0.12;
			sum += texture2D(texture, vec2(vTexCoord.x - blurSize, vTexCoord.y)) * 0.15;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y)) * 0.16;
			sum += texture2D(texture, vec2(vTexCoord.x + blurSize, vTexCoord.y)) * 0.15;
			sum += texture2D(texture, vec2(vTexCoord.x + 2.0*blurSize, vTexCoord.y)) * 0.12;
			sum += texture2D(texture, vec2(vTexCoord.x + 3.0*blurSize, vTexCoord.y)) * 0.09;
			sum += texture2D(texture, vec2(vTexCoord.x + 4.0*blurSize, vTexCoord.y)) * 0.05;
			
			
			return sum;
		}
		]]
  blur2 = love.graphics.newShader [[
		
		vec4 effect(vec4 color, Image texture, vec2 vTexCoord, vec2 pixel_coords)
		{
			vec4 sum = vec4(0.0);
			number blurSize = 0.03;

			// take nine samples, with the distance blurSize between them
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y - 4.0*blurSize)) * 0.05;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y - 3.0*blurSize)) * 0.09;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y - 2.0*blurSize)) * 0.12;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y- blurSize)) * 0.15;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y)) * 0.16;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y + blurSize)) * 0.15;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y + 2.0*blurSize)) * 0.12;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y + 3.0*blurSize)) * 0.09;
			sum += texture2D(texture, vec2(vTexCoord.x, vTexCoord.y + 4.0*blurSize)) * 0.05;

			return sum;
		}
		]]
    

  font = love.graphics.newFont(18)
    
  love.physics.setMeter(1000)
  world = love.physics.newWorld(world, 0, 0, true)
  
  ship = ships:createShip(world, "Salvager", 100, 100, 50)
  ships:addAnimation(ship, res_image["salvager_idle"], "idle", 198, 81, 1, 1, 0.001)
  ships:addAnimation(ship, res_image["salvager_forward"], "forward", 198, 81, 1, '1-31', 0.001)
  ships:addAnimation(ship, res_image["salvager_forward_release"], "forward_release", 196, 81, 1, '1-31', 0.001, function (anim, loopcount) ships:changeAnimation(ship, "idle") end )
  ships:addAnimation(ship, res_image["salvager_reverse"], "reverse", 198, 79, 1, '1-31', 0.001)
  ships:addAnimation(ship, res_image["salvager_reverse_release"], "reverse_release", 198, 79, 1, '1-31', 0.001, function (anim, loopcount) ships:changeAnimation(ship, "idle") end )
  
  local station = ships:createAIStation(world, 'Oort Station 1', 1500, 0)
  ships:addAnimation(station, res_image.stations[1], "idle", 1024, 1024, 1, 1, 0.001)
  table.insert(ai_ships, station)
  
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)
  asteroids:create(world)

  audio_ship_background = love.audio.newSource(res_audio.ship_background)
  audio_ship_background:setVolume(game_settings.sfx_volume)
  audio_ship_background:setLooping(true)
  audio_ship_background:play()
  
  audio_ship_engine = love.audio.newSource(res_audio.ship_engine)
  audio_ship_engine:setVolume(0.1)
  audio_ship_engine:setLooping(true)
  audio_ship_engine:pause()
  
  audio_ship_laser = love.audio.newSource(res_audio.laser_operation)
  audio_ship_laser:setVolume(game_settings.sfx_volume)
  audio_ship_laser:setLooping(true)
  audio_ship_laser:pause()
  
  audio_ship_laser_end = love.audio.newSource(res_audio.laser_end)
  audio_ship_laser_end:setVolume(game_settings.sfx_volume)
  audio_ship_laser_end:setLooping(false)
  audio_ship_laser_end:pause()
  
  audio_destroy_rubble = love.audio.newSource(res_audio.destroy_rubble)
  audio_destroy_rubble:setVolume(game_settings.sfx_volume)
  audio_destroy_rubble:setLooping(false)
  audio_destroy_rubble:pause()
  
  beam_impact = love.graphics.newImage("assets/images/bluelight.png")
  galaxy = love.graphics.newImage("assets/images/galaxy.png")
  target = love.graphics.newImage("assets/images/triangle-05.png")
  
  love.window.setMode(game_settings.resolution[1], game_settings.resolution[2])
  
  world:setCallbacks(beginContact, endContact, preSolve, postSolve)
end

function love.update(dt)
    
  if love.keyboard.isDown("up") then  
    -- Increase Velocity.   
    ship.throttle = ship.throttle + 20 * dt
    if ship.animationId ~= "forward" and ship.throttle > 0 then
      ships:changeAnimation(ship, "forward")
    end
    v = math.abs(ship.throttle) / 100
    if v > 0.66 then v = 0.66 end
    audio_ship_engine:setVolume(0.1 + v)
    audio_ship_engine:play()
  end
  if love.keyboard.isDown("down") then
    -- Decrease Velocity.
    ship.throttle = ship.throttle - 20 * dt  
    if ship.animationId ~= "reverse" and ship.throttle < 0 then
      ships:changeAnimation(ship, "reverse")
    end
    v = math.abs(ship.throttle) / 100
    if v > 0.66 then v = 0.66 end
    audio_ship_engine:setVolume(0.1 + v)
    audio_ship_engine:play()
  end
  
  if love.keyboard.isDown("space") then
    weapon_active_laser = true
    audio_ship_laser:play()
    local t = getAllTargets()
    local nx = t[ui.target].x + love.math.random(-5, 5)
    local ny = t[ui.target].y + love.math.random(-5, 5)
    local tg = {
        img = target
        ,x = nx
        ,y = ny
        ,w = target:getWidth()
        ,h = target:getHeight()
      }
    local ws = res_gamedata.weapon_stats[res_text.weapon_names[ship.weapons[ship.weaponSelId]]]
    local dmg = ws.damage
    local amt = love.math.random(dmg[1], dmg[2]) * dt
    local pref = ""
    local colour = {255, 0, 0}
    if amt > 0 then
      pref = "-"
      colour = {255, 255, 255}
    end
    local effdust = effects:create(world, "dust", tg.x, tg.y, 414, 403, 1, '1-8', 212, 201)
    effects:setText(effdust, pref .. round(amt, 2), tg.x, tg.y, 159, 1.66, colour)
    if asteroids:damage(t[ui.target], amt) then
      audio_destroy_rubble:play()
    end
    
    ship.cargo_ore = ship.cargo_ore + amt
    if ship.cargo_ore == ship.cargo_ore_max then
      ship.cargo_ore = ship.cargo_ore_max
    end
  elseif not love.keyboard.isDown("space") then
    audio_ship_laser:pause()
    if weapon_active_laser then audio_ship_laser_end:play() end
    weapon_active_laser = false
  end
  
  if love.keyboard.isDown("left") then
    -- Turn left.
    ship.rotation = ship.rotation - 3 * dt
  end
  if love.keyboard.isDown("right") then
    -- Turn right.
    ship.rotation = ship.rotation + 3 * dt
  end
  if love.keyboard.isDown("lctrl") then
    ship.throttle = 0
  end
    
  if not love.keyboard.isDown("up") and ship.animationId == "forward" and ship.throttle == 0 then
    audio_ship_engine:pause()
    ships:changeAnimation(ship, "forward_release")
  end
  if not love.keyboard.isDown("up") and ship.animationId == "reverse" and ship.throttle == 0 then
    audio_ship_engine:pause()    
    ships:changeAnimation(ship, "reverse_release")
  end
    
  world:update(dt)

  ships:updateShip(ship, dt)

  asteroids:update(dt)
  
  effects:update(dt)
  
  portraits:update(dt)
      
end

function love.keypressed( key, scancode )
  if key == "n" then
    ui.target = ui.target + 1
    if ui.target > #getAllTargets() then
      ui.target = 1
    end
  end

  if key == "q" then
    quests.intro:visit()
  end
  
  if key == "1" then
    ship.weaponSelId = 1
  end
  if key == "2" then
    ship.weaponSelId = 2
  end
  if key == "3" then
    ship.weaponSelId = 3
  end
  if key == "4" then
    ship.weaponSelId = 4
  end
  if key == "5" then
    ship.weaponSelId = 5
  end
  
end

function getAllTargets()
  
  local t = ui:sortClosest(asteroids, ship)
  
  for i=1, #ai_ships do
    local d = distance(ship.body:getX(), ship.body:getY(), ai_ships[i].body:getX(), ai_ships[i].body:getY())
    ai_ships[i].distance = d
    table.insert(t, ai_ships[i])
  end
  
  return t
end

function drawLaser(sx, sy, tg)
  local lns = {sx, sy, ((tg.x - sx) / 2 + sx + math.random(-15, 15)), ((tg.y - sy) / 2 + sy + math.random(-15, 15)), tg.x, tg.y}

  local offx = love.math.random(-1, 1)
  local offy = love.math.random(-1, 1)
  
  local dx = tg.x + offx
  local dy = tg.y + offy

  love.graphics.setShader(blur2)
  love.graphics.draw(beam_impact, dx, dy, 0, 10, 10, 10, 10)
  love.graphics.setShader(blur1)
  love.graphics.draw(beam_impact, dx, dy, 0, 7, 7, 10, 10)
  love.graphics.setShader()
  
  love.graphics.setColor(0, 25, 150, 60)
  love.graphics.setLineWidth(8)
  love.graphics.line(lns)
  
  love.graphics.setColor(0, 110, 200, 123)
  love.graphics.setLineWidth(3)
  love.graphics.line(lns)
  
  love.graphics.setLineWidth(1)
  love.graphics.setColor(255, 255, 255)

end

function love.draw()
  
  love.graphics.draw(galaxy, 0, 0)
  
  love.graphics.push()
  love.graphics.translate(ship.body:getX() * -1, ship.body:getY() * -1)
  local t = getAllTargets()
  local tg = {
      img = target
      ,name = t[ui.target].name
      ,health = t[ui.target].health
      ,health_max = t[ui.target].health_max
      ,x = t[ui.target].x - target:getWidth() / 2
      ,y = t[ui.target].y - target:getHeight() / 2
      ,w = target:getWidth()
      ,h = target:getHeight()
    }
  
  asteroids:draw()
  ships:drawShipList(ai_ships)
  effects:draw()
  
  if tg ~= nil then
    love.graphics.draw(tg.img, tg.x, tg.y)
    love.graphics.print(math.floor(tg.health) .. " / " .. math.floor(tg.health_max), tg.x, tg.y + 64)
  end
  
  love.graphics.pop()

  tg.x = tg.x - ship.body:getX() + tg.w / 2
  tg.y = tg.y - ship.body:getY() + tg.h / 2

  -- Draw effect if using laser weapon.
  if (weapon_active_laser) then
    drawLaser(400, 300, tg)
  end

  ships:drawShip(ship, 400, 300)
  
  love.graphics.print("X" .. math.floor(ship.body:getX()) .. ", Y" .. math.floor(ship.body:getY()) .. " T" .. math.floor(ship.throttle), 10, 3)
  
  ui:drawMinimap(asteroids, ship, ai_ships)
  
  ui:drawTargets(getAllTargets())

  ui:drawWeapons(ship.weapons, ship.weaponSelId)
  
  portraits:draw()


  local collres = ships:checkCollide(ship, ai_ships)
  if collres and collres[2] == 'Station' then
    local w = font:getWidth("Press D to Request Permission to Dock") / 2
    love.graphics.print('Press D to Request Permission to Dock', love.graphics.getWidth() / 2 - w, love.graphics.getHeight() / 2)
  end

end

